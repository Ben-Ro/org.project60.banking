<?php
/*
    org.project60.banking extension for CiviCRM

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *
 * @package org.project60.banking
 * @copyright GNU Affero General Public License
 * $Id$
 *
 */
abstract class CRM_Banking_PluginModel_Matcher extends CRM_Banking_PluginModel_Base {

    
  protected $_suggestions;

  protected function addSuggestion( $suggestion )
  {
      $this->_suggestions[] = $suggestion;
    }
        
  // ------------------------------------------------------
  // Functions to be provided by the plugin implementations
  // ------------------------------------------------------
  /** 
   * Report if the plugin is capable of batch matching (v2+?)
   * 
   * @return bool
   */
  function does_batch_matching() { return FALSE; }

  /** 
   * Generate a set of matches for the given bank transaction
   * 
   * @return array(match structures)
   */
  public abstract function match(CRM_Banking_BAO_BankTransaction $btx, CRM_Banking_Matcher_Context $context);

  /** 
   * Executes a previously generated match, i.e. the suggestion is accepted and realized
   * 
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return TODO: what?
   */
  public abstract function execute( $match, $btx );


  /** 
   * Generate html code to visualize the given match. The visualization may also provide interactive form elements.
   * 
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return html code snippet
   */  
  function visualize_match( CRM_Banking_Matcher_Suggestion $match, $btx) {
      $s = '<ul>Because :';
      $evidence = $match->getEvidence();
      foreach ($evidence as $ev) {
          $s .= '<li>' . $ev . '</li>';
      }
      $s .= '</ul>';
      return $s;
  }

  /**
   * If the user has modified the input fields provided by the "visualize" html code,
   * the new values will be passed here BEFORE execution
   *
   * CAUTION: there might be more parameters than provided. Only process the ones that
   *  'belong' to your suggestion.
   */
  public function update_parameters(CRM_Banking_Matcher_Suggestion $match, $parameters) {
      // Noting to do in the abstract matcher. Override for a matcher that uses input fields
  }


  /**
   * class constructor
   */ function __construct($config_name) {
        $this->_suggestions = array();
    parent::__construct($config_name);

  }

  /** 
   * Returns the threshold for automatic execution as set in the config
   * 
   * @return float ([0..1]) 
   */
  function getThreshold() { 
    if (isset($this->_plugin_config->threshold)) {
      $threshold = $this->_plugin_config->threshold;
      if ($threshold >= 1.0) {
        return 1.0;
      } elseif ($threshold <= 0.0) {
        return 0.0;
      } else {
        return $threshold;
      }
    }
    return 1.0; 
  }

  /** 
   * Returns whether the plugin is configured to execute unsupervised
   * 
   * @return bool
   */
  function autoExecute() { 
    if (isset($this->_plugin_config->auto_exec)) {
      $value = $this->_plugin_config->auto_exec;
      return ($value==true || $value=='true');
    } else {
      return false;
    }
  }

  
  function translateAction($action,$params,$btx) {
    $className = 'CRM_Banking_PluginModel_Action_' . $action;
    if (class_exists($className)) {
      $actor = new $className();
      return $actor->describe($params,$btx);
    }
    return "Unknown action '{$action}'";      
  }
  
  function executeAction($action,$params,$btx) {
    $className = 'CRM_Banking_PluginModel_Action_' . $action;
    if (class_exists($className)) {
      $actor = new $className();
      return $actor->execute($params,$btx);
    }
  }
  

    
  function getActions( $btx ) {
      $config = $this->_plugin_config;
      $s = '';
      if ($config->actions) {
        $s = '<ul>I suggest :';
        foreach ($config->actions as $action => $params) {
            $s .= '<li>' . $this->translateAction($action,$params,$btx) . '</li>';
        }
        $s .= '</ul>';
      }
      return $s;
    
  }

}

