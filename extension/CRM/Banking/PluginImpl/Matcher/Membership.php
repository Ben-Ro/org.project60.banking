<?php
/*-------------------------------------------------------+
| Project 60 - CiviBanking                               |
| Copyright (C) 2013-2015 SYSTOPIA                       |
| Author: B. Endres (endres -at- systopia.de)            |
| http://www.systopia.de/                                |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL v3 license. You can redistribute it and/or  |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/


require_once 'CRM/Banking/Helpers/OptionValue.php';

/**
 * This matcher tries to reconcile the payments with existing memberships. 
 */
class CRM_Banking_PluginImpl_Matcher_Membership extends CRM_Banking_PluginModel_Matcher {

  /**
   * class constructor
   */ 
  function __construct($config_name) {
    parent::__construct($config_name);

    // read config, set defaults
    $config = $this->_plugin_config;
    if (!isset($config->threshold))          $config->threshold = 0.5;
    if (!isset($config->general_options))    $config->general_options = array();
    if (!isset($config->membership_options)) $config->membership_options = array();
  }

  /** 
   * Generate a set of suggestions for the given bank transaction
   * 
   * @return array(match structures)
   */
  public function match(CRM_Banking_BAO_BankTransaction $btx, CRM_Banking_Matcher_Context $context) {
    $config = $this->_plugin_config;
    $threshold = $config->threshold;
    $data_parsed = $btx->getDataParsed();

    // find potential contacts    
    $contacts_found = $context->findContacts($threshold, $data_parsed['name'], $config->lookup_contact_by_name);

    // with the identified contacts, look up matching memberships
    $memberships = $this->findMemberships($contacts_found, $context);

    // transform all memberships into suggestions
    foreach ($memberships as $membership) {
      $suggestion = new CRM_Banking_Matcher_Suggestion($this, $btx);
      if (isset($contact->general_options->suggestion_title)) {
        $suggestion->setTitle($contact->general_options->suggestion_title);  
      } else {
        $suggestion->setTitle(ts("Possible matching contribution found"));
      }

      $suggestion->setId("existing-$contribution_id");
      $suggestion->setParameter('membership_id', $membership['id']);
      $suggestion->setProbability($membership['probability']);
      $btx->addSuggestion($suggestion);
    }

    // that's it...
    return empty($this->_suggestions) ? null : $this->_suggestions;
  }

  /**
   * Handle the different actions, should probably be handles at base class level ...
   * 
   * @param type $match
   * @param type $btx
   */
  public function execute($suggestion, $btx) {
    $membership_id = $suggestion->getParameter('membership_id');

    // TODO: Implement:
    // 1. create contribution
    // 2. connect to membership
    // 3. update status?

    $newStatus = banking_helper_optionvalueid_by_groupname_and_name('civicrm_banking.bank_tx_status', 'Processed');
    $btx->setStatus($newStatus);
    parent::execute($suggestion, $btx);
    return true;
  }

  /**
   * If the user has modified the input fields provided by the "visualize" html code,
   * the new values will be passed here BEFORE execution
   *
   * CAUTION: there might be more parameters than provided. Only process the ones that
   *  'belong' to your suggestion.
   */
  public function update_parameters(CRM_Banking_Matcher_Suggestion $match, $parameters) {
    // NOTHING to do...
  }

  /** 
   * Generate html code to visualize the given match. The visualization may also provide interactive form elements.
   * 
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return html code snippet
   */  
  function visualize_match( CRM_Banking_Matcher_Suggestion $match, $btx) {
    $smarty = CRM_Core_Smarty::singleton();

    // load the contribution
    $membership_id = $match->getParameter('membership_id');

    // load membership
    $membership = civicrm_api('Membership', 'getsingle', array('id' => $membership_id, 'version'=>3));
    $smarty->assign('membership', $membership);
    // TODO: error handling

    // load contact
    $contact = civicrm_api('Membership', 'getsingle', array('id' => $membership['contact_id'], 'version'=>3));
    $smarty->assign('contact', $contact);
    // TODO: error handling

    // load last membership fee
    $last_fee = civicrm_api('Contribution', 'getsingle', array('id' => $membership['last_contribution_id'], 'version'=>3));
    $smarty->assign('last_fee', $last_fee);
    // TODO: error handling

    return $smarty->fetch('CRM/Banking/PluginImpl/Matcher/Membership.suggestion.tpl');
  }

  /** 
   * Generate html code to visualize the executed match.
   * 
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return html code snippet
   */  
  function visualize_execution_info( CRM_Banking_Matcher_Suggestion $match, $btx) {
    $membership_id = $match->getParameter('membership_id');
    //$contribution_link = CRM_Utils_System::url("civicrm/contact/view/contribution", "action=view&reset=1&id=${contribution_id}&cid=2&context=home");
    return "<p>".sprintf(ts("This payment was associated with <a href=\"%s\">membership #%s</a>."), $contribution_link, $contribution_id)."</p>";
  }


  /**
   * This function will use the given parameters to find
   * all potential membership IDs with the contacts found.
   */
  protected function findMemberships($contact2probability, $context) {
    if (empty($contact2probability)) return array();

    $config = $this->_plugin_config;
    $memberships = array();
    $query_sql = $this->createSQLQuery(array_keys($contact2probability), $context);
    $query = CRM_Core_DAO::executeQuery($query_sql);
    while ($query->fetch()) {
      $memberships[] = array(
        'id'            => $query->id,
        'contact_id'    => $query->contat_id,
        'last_fee_id'   => $query->last_fee_id
        // TO BE CONTINUED
        );
    }

    // now rate all the memberships, and cut off the ones under the threshold
    $result = array();
    foreach ($memberships as $membership) {
      $probability = $this->rateMembership($membership, $context);
      if ($probability >= $config->threshold) {
        $result[] = $membership;
      }
    }

    return $result;
  }


  /**
   * This function will generate an SQL statement to
   * find all relevant memberships. It should also
   * provide all values necessary to rate the membership
   * for probability
   * 
   * the query itself is derived from the plugin's configuration
   * and will be cached.
   *
   * @return SQL string
   */
  protected function createSQLQuery($contact_ids, $context) {
    $cache_key = "matcher_membership_" . $this->_plugin_id . "_query";
    $query = CRM_Utils_StaticCache::getCachedEntry($cache_key);
    if ($query == NULL) {
      // TODO: build query
      $config = $this->_plugin_config;
      $base_query = "
      SELECT 
        civicrm_membership.id         AS id,
        civicrm_membership.contact_id AS contact_id
      FROM
        civicrm_membership
      WHERE
        civicrm_membership.contact_id           IN (CONTACT_IDS)
      AND civicrm_membership.membership_type_id IN (%s)
      AND (%s);
      ";

      // get $membership_type_id_list


      // compile $membership_type_clauses


      // compile final query:
      $query = sprintf($base_query, $membership_type_id_list, $membership_type_clauses);

      // normalize query (remove extra whitespaces)
      $query = preg_replace('/\s+/', ' ', $query);

      // and cache the result
      CRM_Utils_StaticCache::setCachedEntry($cache_key, $query);
    }

    // insert the contact IDs
    $contact_id_list = implode(',', $contact_ids);
    return str_replace('CONTACT_IDS', $contact_id_list, $query);
  }

  /**
   * This function will evaluate the given membership instance data
   * wrt probability.
   * 
   * @return float [0..1]
   */
  protected function rateMembership($membership, $context) {
    // TODO: implmement
    return 1.0;
  }
}

