<?php

/**
 * The Default Options Matcher will provide the user
 */
class CRM_Banking_PluginImpl_Matcher_DefaultOptions extends CRM_Banking_PluginModel_Matcher {

  /**
   * class constructor
   */ 
  function __construct($config_name) {
    parent::__construct($config_name);

    // read config, set defaults
    $config = $this->_plugin_config;
    if (!isset($config->manual_enabled)) $config->manual_enabled = true;
    if (!isset($config->manual_probability)) $config->manual_probability = 0.1;
    if (!isset($config->manual_show_always)) $config->manual_show_always = true;
    if (!isset($config->manual_title)) $config->manual_title = "Manually processed.";
    if (!isset($config->manual_message)) $config->manual_message = "Please configure";
    if (!isset($config->manual_contribution)) $config->manual_contribution = "Contribution:";

    if (!isset($config->ignore_enabled)) $config->ignore_enabled = true;
    if (!isset($config->ignore_probability)) $config->ignore_probability = 0.1;
    if (!isset($config->ignore_show_always)) $config->ignore_show_always = true;
    if (!isset($config->ignore_title)) $config->ignore_title = "Not Relevant";
    if (!isset($config->ignore_message)) $config->ignore_message = "Please configure";
  }

  public function match(CRM_Banking_BAO_BankTransaction $btx, CRM_Banking_Matcher_Context $context) {

    $config = $this->_plugin_config;

    // create 'manually processed' suggestion, if applicable
    if ($config->manual_enabled) {
      if ($config->manual_show_always || $this->has_other_suggestions($btx)) {
        $manually_processed = new CRM_Banking_Matcher_Suggestion($this, $btx);
        $manually_processed->addEvidence($this->get_probability($config->manual_probability, $btx));
        $manually_processed->setTitle($config->manual_title);
        $manually_processed->setId('manual');
        $btx->addSuggestion($manually_processed);
      }
    }

    // create 'not relevant' suggestion, if applicable
    if ($config->ignore_enabled) {
      if ($config->ignore_show_always || $this->has_other_suggestions($btx)) {
        $not_relevant = new CRM_Banking_Matcher_Suggestion($this, $btx);
        $not_relevant->addEvidence($this->get_probability($config->ignore_probability, $btx));
        $not_relevant->setTitle($config->ignore_title);
        $not_relevant->setId('ignore');
        $btx->addSuggestion($not_relevant);
      }
    }

    // that's it...
    return empty($this->_suggestions) ? null : $this->_suggestions;
  }

  /**
   * Handle the different actions, should probably be handles at base class level ...
   * 
   * @param type $match
   * @param type $btx
   */
  public function execute($suggestion, $btx) {
    if ($suggestion->getId()==="manual") {
      $cid = $suggestion->getParameter('manual_contribution_id');
      if ($cid) {
        // TODO: verify the contribution ID
        CRM_Core_Session::setStatus(ts("The contribution (id=$cid) is not valid. The payment is NOT completed."), ts('Payment NOT completed.'), 'alert');
      }  else {
        CRM_Core_Session::setStatus(ts("No contribution given. The payment is NOT completed."), ts('Payment NOT completed.'), 'alert');
      }
    } else {
      // this is the IGNORE action. Simply set the status to ignored
      $newStatus = banking_helper_optionvalueid_by_groupname_and_name('civicrm_banking.bank_tx_status', 'Ignored');
      $btx->setStatus($newStatus);
    }
  }

  /**
   * If the user has modified the input fields provided by the "visualize" html code,
   * the new values will be passed here BEFORE execution
   *
   * CAUTION: there might be more parameters than provided. Only process the ones that
   *  'belong' to your suggestion.
   */
  public function update_parameters(CRM_Banking_Matcher_Suggestion $match, $parameters) {
    if ($match->getId() === "manual") {
      $match->setParameter('manual_contribution_id', $parameters['manual_contribution_id']);
    }
  }

    /** 
   * Generate html code to visualize the given match. The visualization may also provide interactive form elements.
   * 
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return html code snippet
   */  
  function visualize_match( CRM_Banking_Matcher_Suggestion $match, $btx) {
    if ($match->getId() === "manual") {
      return  $this->_plugin_config->manual_message."<br/>".
              $this->_plugin_config->manual_contribution.
              '&nbsp;<input name="manual_contribution_id" class="form-text ac_input" type="text" style="width: 8em;" placeholder="contribution id" autocomplete="off"/>';

    } else {
      return  $this->_plugin_config->ignore_message."<br/>".
              $this->_plugin_config->ignore_contribution;

    }
  }








  /**
   * check if there are more suggestions for this transaction
   */
  private function has_other_suggestions(CRM_Banking_BAO_BankTransaction $btx) {
    return count($btx->getSuggestions())>0;
  }
  
  /**
   * calculate the absolute probability based on the (possibly) relative value in the config
   */
  private function get_probability($string_value, CRM_Banking_BAO_BankTransaction $btx) {
    if (substr($string_value, -1) === "%") {
      // if the value ends in '%' it's meant to be relative to the least probable suggestion
      $least_probable = end($btx->getSuggestionList());
      if ($least_probable) {
        $least_probable_value = $least_probable->getProbability();
      } else {
        $least_probable_value = 1;
      }
      return $least_probable_value * substr($string_value, 0, strlen($string_value)-1) / 100.0;
    
    } else {
      // in the default case, we just assume it's an absolute value anyways...
      return $string_value;
    }
  }
}

