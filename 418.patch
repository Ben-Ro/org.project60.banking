From 5a29f3e522de73fe08cbe2162fec755ea08983c0 Mon Sep 17 00:00:00 2001
From: Jens Schuppe <schuppe@systopia.de>
Date: Tue, 2 Apr 2024 16:16:22 +0200
Subject: [PATCH] Update Civix-generated code to Civix version 23.02.1

---
 CRM/Banking/Upgrader.php       |   2 +-
 CRM/Banking/Upgrader/Base.php  | 376 ---------------------------------
 banking.civix.php              | 126 +----------
 banking.php                    |  36 ----
 info.xml                       |   7 +-
 mixin/ang-php@1.0.0.mixin.php  |  37 ----
 mixin/menu-xml@1.0.0.mixin.php |  31 ---
 mixin/mgd-php@1.0.0.mixin.php  |  42 ----
 mixin/polyfill.php             | 101 ---------
 9 files changed, 15 insertions(+), 743 deletions(-)
 delete mode 100644 CRM/Banking/Upgrader/Base.php
 delete mode 100644 mixin/ang-php@1.0.0.mixin.php
 delete mode 100644 mixin/menu-xml@1.0.0.mixin.php
 delete mode 100644 mixin/mgd-php@1.0.0.mixin.php
 delete mode 100644 mixin/polyfill.php

diff --git a/CRM/Banking/Upgrader.php b/CRM/Banking/Upgrader.php
index 99891788..af884b89 100644
--- a/CRM/Banking/Upgrader.php
+++ b/CRM/Banking/Upgrader.php
@@ -20,7 +20,7 @@
 /**
  * Collection of upgrade steps.
  */
-class CRM_Banking_Upgrader extends CRM_Banking_Upgrader_Base {
+class CRM_Banking_Upgrader extends CRM_Extension_Upgrader_Base {
 
   /**
    * Create table for Rules Matcher/Analyser
diff --git a/CRM/Banking/Upgrader/Base.php b/CRM/Banking/Upgrader/Base.php
deleted file mode 100644
index 785f49fe..00000000
--- a/CRM/Banking/Upgrader/Base.php
+++ /dev/null
@@ -1,376 +0,0 @@
-<?php
-
-// AUTO-GENERATED FILE -- Civix may overwrite any changes made to this file
-use CRM_Banking_ExtensionUtil as E;
-
-/**
- * Base class which provides helpers to execute upgrade logic
- */
-class CRM_Banking_Upgrader_Base {
-
-  /**
-   * @var varies, subclass of this
-   */
-  static $instance;
-
-  /**
-   * @var CRM_Queue_TaskContext
-   */
-  protected $ctx;
-
-  /**
-   * @var string, eg 'com.example.myextension'
-   */
-  protected $extensionName;
-
-  /**
-   * @var string, full path to the extension's source tree
-   */
-  protected $extensionDir;
-
-  /**
-   * @var array(revisionNumber) sorted numerically
-   */
-  private $revisions;
-
-  /**
-   * @var boolean
-   *   Flag to clean up extension revision data in civicrm_setting
-   */
-  private $revisionStorageIsDeprecated = FALSE;
-
-  /**
-   * Obtain a reference to the active upgrade handler.
-   */
-  static public function instance() {
-    if (!self::$instance) {
-      // FIXME auto-generate
-      self::$instance = new CRM_Banking_Upgrader(
-        'org.project60.banking',
-        realpath(__DIR__ . '/../../../')
-      );
-    }
-    return self::$instance;
-  }
-
-  /**
-   * Adapter that lets you add normal (non-static) member functions to the queue.
-   *
-   * Note: Each upgrader instance should only be associated with one
-   * task-context; otherwise, this will be non-reentrant.
-   *
-   * @code
-   * CRM_Banking_Upgrader_Base::_queueAdapter($ctx, 'methodName', 'arg1', 'arg2');
-   * @endcode
-   */
-  static public function _queueAdapter() {
-    $instance = self::instance();
-    $args = func_get_args();
-    $instance->ctx = array_shift($args);
-    $instance->queue = $instance->ctx->queue;
-    $method = array_shift($args);
-    return call_user_func_array(array($instance, $method), $args);
-  }
-
-  public function __construct($extensionName, $extensionDir) {
-    $this->extensionName = $extensionName;
-    $this->extensionDir = $extensionDir;
-  }
-
-  // ******** Task helpers ********
-
-  /**
-   * Run a CustomData file.
-   *
-   * @param string $relativePath the CustomData XML file path (relative to this extension's dir)
-   * @return bool
-   */
-  public function executeCustomDataFile($relativePath) {
-    $xml_file = $this->extensionDir . '/' . $relativePath;
-    return $this->executeCustomDataFileByAbsPath($xml_file);
-  }
-
-  /**
-   * Run a CustomData file
-   *
-   * @param string $xml_file  the CustomData XML file path (absolute path)
-   *
-   * @return bool
-   */
-  protected static function executeCustomDataFileByAbsPath($xml_file) {
-    $import = new CRM_Utils_Migrate_Import();
-    $import->run($xml_file);
-    return TRUE;
-  }
-
-  /**
-   * Run a SQL file.
-   *
-   * @param string $relativePath the SQL file path (relative to this extension's dir)
-   *
-   * @return bool
-   */
-  public function executeSqlFile($relativePath) {
-    CRM_Utils_File::sourceSQLFile(
-      CIVICRM_DSN,
-      $this->extensionDir . DIRECTORY_SEPARATOR . $relativePath
-    );
-    return TRUE;
-  }
-
-  /**
-   * @param string $tplFile
-   *   The SQL file path (relative to this extension's dir).
-   *   Ex: "sql/mydata.mysql.tpl".
-   * @return bool
-   */
-  public function executeSqlTemplate($tplFile) {
-    // Assign multilingual variable to Smarty.
-    $upgrade = new CRM_Upgrade_Form();
-
-    $tplFile = CRM_Utils_File::isAbsolute($tplFile) ? $tplFile : $this->extensionDir . DIRECTORY_SEPARATOR . $tplFile;
-    $smarty = CRM_Core_Smarty::singleton();
-    $smarty->assign('domainID', CRM_Core_Config::domainID());
-    CRM_Utils_File::sourceSQLFile(
-      CIVICRM_DSN, $smarty->fetch($tplFile), NULL, TRUE
-    );
-    return TRUE;
-  }
-
-  /**
-   * Run one SQL query.
-   *
-   * This is just a wrapper for CRM_Core_DAO::executeSql, but it
-   * provides syntatic sugar for queueing several tasks that
-   * run different queries
-   */
-  public function executeSql($query, $params = array()) {
-    // FIXME verify that we raise an exception on error
-    CRM_Core_DAO::executeQuery($query, $params);
-    return TRUE;
-  }
-
-  /**
-   * Syntatic sugar for enqueuing a task which calls a function in this class.
-   *
-   * The task is weighted so that it is processed
-   * as part of the currently-pending revision.
-   *
-   * After passing the $funcName, you can also pass parameters that will go to
-   * the function. Note that all params must be serializable.
-   */
-  public function addTask($title) {
-    $args = func_get_args();
-    $title = array_shift($args);
-    $task = new CRM_Queue_Task(
-      array(get_class($this), '_queueAdapter'),
-      $args,
-      $title
-    );
-    return $this->queue->createItem($task, array('weight' => -1));
-  }
-
-  // ******** Revision-tracking helpers ********
-
-  /**
-   * Determine if there are any pending revisions.
-   *
-   * @return bool
-   */
-  public function hasPendingRevisions() {
-    $revisions = $this->getRevisions();
-    $currentRevision = $this->getCurrentRevision();
-
-    if (empty($revisions)) {
-      return FALSE;
-    }
-    if (empty($currentRevision)) {
-      return TRUE;
-    }
-
-    return ($currentRevision < max($revisions));
-  }
-
-  /**
-   * Add any pending revisions to the queue.
-   */
-  public function enqueuePendingRevisions(CRM_Queue_Queue $queue) {
-    $this->queue = $queue;
-
-    $currentRevision = $this->getCurrentRevision();
-    foreach ($this->getRevisions() as $revision) {
-      if ($revision > $currentRevision) {
-        $title = E::ts('Upgrade %1 to revision %2', array(
-          1 => $this->extensionName,
-          2 => $revision,
-        ));
-
-        // note: don't use addTask() because it sets weight=-1
-
-        $task = new CRM_Queue_Task(
-          array(get_class($this), '_queueAdapter'),
-          array('upgrade_' . $revision),
-          $title
-        );
-        $this->queue->createItem($task);
-
-        $task = new CRM_Queue_Task(
-          array(get_class($this), '_queueAdapter'),
-          array('setCurrentRevision', $revision),
-          $title
-        );
-        $this->queue->createItem($task);
-      }
-    }
-  }
-
-  /**
-   * Get a list of revisions.
-   *
-   * @return array(revisionNumbers) sorted numerically
-   */
-  public function getRevisions() {
-    if (!is_array($this->revisions)) {
-      $this->revisions = array();
-
-      $clazz = new ReflectionClass(get_class($this));
-      $methods = $clazz->getMethods();
-      foreach ($methods as $method) {
-        if (preg_match('/^upgrade_(.*)/', $method->name, $matches)) {
-          $this->revisions[] = $matches[1];
-        }
-      }
-      sort($this->revisions, SORT_NUMERIC);
-    }
-
-    return $this->revisions;
-  }
-
-  public function getCurrentRevision() {
-    $revision = CRM_Core_BAO_Extension::getSchemaVersion($this->extensionName);
-    if (!$revision) {
-      $revision = $this->getCurrentRevisionDeprecated();
-    }
-    return $revision;
-  }
-
-  private function getCurrentRevisionDeprecated() {
-    $key = $this->extensionName . ':version';
-    if ($revision = CRM_Core_BAO_Setting::getItem('Extension', $key)) {
-      $this->revisionStorageIsDeprecated = TRUE;
-    }
-    return $revision;
-  }
-
-  public function setCurrentRevision($revision) {
-    CRM_Core_BAO_Extension::setSchemaVersion($this->extensionName, $revision);
-    // clean up legacy schema version store (CRM-19252)
-    $this->deleteDeprecatedRevision();
-    return TRUE;
-  }
-
-  private function deleteDeprecatedRevision() {
-    if ($this->revisionStorageIsDeprecated) {
-      $setting = new CRM_Core_BAO_Setting();
-      $setting->name = $this->extensionName . ':version';
-      $setting->delete();
-      Civi::log()->debug("Migrated extension schema revision ID for {$this->extensionName} from civicrm_setting (deprecated) to civicrm_extension.\n");
-    }
-  }
-
-  // ******** Hook delegates ********
-
-  /**
-   * @see https://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_install
-   */
-  public function onInstall() {
-    $files = glob($this->extensionDir . '/sql/*_install.sql');
-    if (is_array($files)) {
-      foreach ($files as $file) {
-        CRM_Utils_File::sourceSQLFile(CIVICRM_DSN, $file);
-      }
-    }
-    $files = glob($this->extensionDir . '/sql/*_install.mysql.tpl');
-    if (is_array($files)) {
-      foreach ($files as $file) {
-        $this->executeSqlTemplate($file);
-      }
-    }
-    $files = glob($this->extensionDir . '/xml/*_install.xml');
-    if (is_array($files)) {
-      foreach ($files as $file) {
-        $this->executeCustomDataFileByAbsPath($file);
-      }
-    }
-    if (is_callable(array($this, 'install'))) {
-      $this->install();
-    }
-  }
-
-  /**
-   * @see https://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_postInstall
-   */
-  public function onPostInstall() {
-    $revisions = $this->getRevisions();
-    if (!empty($revisions)) {
-      $this->setCurrentRevision(max($revisions));
-    }
-    if (is_callable(array($this, 'postInstall'))) {
-      $this->postInstall();
-    }
-  }
-
-  /**
-   * @see https://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_uninstall
-   */
-  public function onUninstall() {
-    $files = glob($this->extensionDir . '/sql/*_uninstall.mysql.tpl');
-    if (is_array($files)) {
-      foreach ($files as $file) {
-        $this->executeSqlTemplate($file);
-      }
-    }
-    if (is_callable(array($this, 'uninstall'))) {
-      $this->uninstall();
-    }
-    $files = glob($this->extensionDir . '/sql/*_uninstall.sql');
-    if (is_array($files)) {
-      foreach ($files as $file) {
-        CRM_Utils_File::sourceSQLFile(CIVICRM_DSN, $file);
-      }
-    }
-  }
-
-  /**
-   * @see https://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_enable
-   */
-  public function onEnable() {
-    // stub for possible future use
-    if (is_callable(array($this, 'enable'))) {
-      $this->enable();
-    }
-  }
-
-  /**
-   * @see https://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_disable
-   */
-  public function onDisable() {
-    // stub for possible future use
-    if (is_callable(array($this, 'disable'))) {
-      $this->disable();
-    }
-  }
-
-  public function onUpgrade($op, CRM_Queue_Queue $queue = NULL) {
-    switch ($op) {
-      case 'check':
-        return array($this->hasPendingRevisions());
-
-      case 'enqueue':
-        return $this->enqueuePendingRevisions($queue);
-
-      default:
-    }
-  }
-
-}
diff --git a/banking.civix.php b/banking.civix.php
index 3872430b..633bed5b 100755
--- a/banking.civix.php
+++ b/banking.civix.php
@@ -24,7 +24,7 @@ class CRM_Banking_ExtensionUtil {
    *   Translated text.
    * @see ts
    */
-  public static function ts($text, $params = []) {
+  public static function ts($text, $params = []): string {
     if (!array_key_exists('domain', $params)) {
       $params['domain'] = [self::LONG_NAME, NULL];
     }
@@ -41,7 +41,7 @@ public static function ts($text, $params = []) {
    *   Ex: 'http://example.org/sites/default/ext/org.example.foo'.
    *   Ex: 'http://example.org/sites/default/ext/org.example.foo/css/foo.css'.
    */
-  public static function url($file = NULL) {
+  public static function url($file = NULL): string {
     if ($file === NULL) {
       return rtrim(CRM_Core_Resources::singleton()->getUrl(self::LONG_NAME), '/');
     }
@@ -79,40 +79,22 @@ public static function findClass($suffix) {
 
 use CRM_Banking_ExtensionUtil as E;
 
-function _banking_civix_mixin_polyfill() {
-  if (!class_exists('CRM_Extension_MixInfo')) {
-    $polyfill = __DIR__ . '/mixin/polyfill.php';
-    (require $polyfill)(E::LONG_NAME, E::SHORT_NAME, E::path());
-  }
-}
-
 /**
  * (Delegated) Implements hook_civicrm_config().
  *
  * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_config
  */
-function _banking_civix_civicrm_config(&$config = NULL) {
+function _banking_civix_civicrm_config($config = NULL) {
   static $configured = FALSE;
   if ($configured) {
     return;
   }
   $configured = TRUE;
 
-  $template = CRM_Core_Smarty::singleton();
-
   $extRoot = __DIR__ . DIRECTORY_SEPARATOR;
-  $extDir = $extRoot . 'templates';
-
-  if (is_array($template->template_dir)) {
-    array_unshift($template->template_dir, $extDir);
-  }
-  else {
-    $template->template_dir = [$extDir, $template->template_dir];
-  }
-
   $include_path = $extRoot . PATH_SEPARATOR . get_include_path();
   set_include_path($include_path);
-  _banking_civix_mixin_polyfill();
+  // Based on <compatibility>, this does not currently require mixin/polyfill.php.
 }
 
 /**
@@ -122,36 +104,7 @@ function _banking_civix_civicrm_config(&$config = NULL) {
  */
 function _banking_civix_civicrm_install() {
   _banking_civix_civicrm_config();
-  if ($upgrader = _banking_civix_upgrader()) {
-    $upgrader->onInstall();
-  }
-  _banking_civix_mixin_polyfill();
-}
-
-/**
- * Implements hook_civicrm_postInstall().
- *
- * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_postInstall
- */
-function _banking_civix_civicrm_postInstall() {
-  _banking_civix_civicrm_config();
-  if ($upgrader = _banking_civix_upgrader()) {
-    if (is_callable([$upgrader, 'onPostInstall'])) {
-      $upgrader->onPostInstall();
-    }
-  }
-}
-
-/**
- * Implements hook_civicrm_uninstall().
- *
- * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_uninstall
- */
-function _banking_civix_civicrm_uninstall() {
-  _banking_civix_civicrm_config();
-  if ($upgrader = _banking_civix_upgrader()) {
-    $upgrader->onUninstall();
-  }
+  // Based on <compatibility>, this does not currently require mixin/polyfill.php.
 }
 
 /**
@@ -159,59 +112,9 @@ function _banking_civix_civicrm_uninstall() {
  *
  * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_enable
  */
-function _banking_civix_civicrm_enable() {
-  _banking_civix_civicrm_config();
-  if ($upgrader = _banking_civix_upgrader()) {
-    if (is_callable([$upgrader, 'onEnable'])) {
-      $upgrader->onEnable();
-    }
-  }
-  _banking_civix_mixin_polyfill();
-}
-
-/**
- * (Delegated) Implements hook_civicrm_disable().
- *
- * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_disable
- * @return mixed
- */
-function _banking_civix_civicrm_disable() {
+function _banking_civix_civicrm_enable(): void {
   _banking_civix_civicrm_config();
-  if ($upgrader = _banking_civix_upgrader()) {
-    if (is_callable([$upgrader, 'onDisable'])) {
-      $upgrader->onDisable();
-    }
-  }
-}
-
-/**
- * (Delegated) Implements hook_civicrm_upgrade().
- *
- * @param $op string, the type of operation being performed; 'check' or 'enqueue'
- * @param $queue CRM_Queue_Queue, (for 'enqueue') the modifiable list of pending up upgrade tasks
- *
- * @return mixed
- *   based on op. for 'check', returns array(boolean) (TRUE if upgrades are pending)
- *   for 'enqueue', returns void
- *
- * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_upgrade
- */
-function _banking_civix_civicrm_upgrade($op, CRM_Queue_Queue $queue = NULL) {
-  if ($upgrader = _banking_civix_upgrader()) {
-    return $upgrader->onUpgrade($op, $queue);
-  }
-}
-
-/**
- * @return CRM_Banking_Upgrader
- */
-function _banking_civix_upgrader() {
-  if (!file_exists(__DIR__ . '/CRM/Banking/Upgrader.php')) {
-    return NULL;
-  }
-  else {
-    return CRM_Banking_Upgrader_Base::instance();
-  }
+  // Based on <compatibility>, this does not currently require mixin/polyfill.php.
 }
 
 /**
@@ -230,8 +133,8 @@ function _banking_civix_insert_navigation_menu(&$menu, $path, $item) {
   if (empty($path)) {
     $menu[] = [
       'attributes' => array_merge([
-        'label'      => CRM_Utils_Array::value('name', $item),
-        'active'     => 1,
+        'label' => $item['name'] ?? NULL,
+        'active' => 1,
       ], $item),
     ];
     return TRUE;
@@ -295,14 +198,3 @@ function _banking_civix_fixNavigationMenuItems(&$nodes, &$maxNavID, $parentID) {
     }
   }
 }
-
-/**
- * (Delegated) Implements hook_civicrm_entityTypes().
- *
- * Find any *.entityType.php files, merge their content, and return.
- *
- * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_entityTypes
- */
-function _banking_civix_civicrm_entityTypes(&$entityTypes) {
-  $entityTypes = array_merge($entityTypes, []);
-}
diff --git a/banking.php b/banking.php
index c5b60852..294f2ba4 100755
--- a/banking.php
+++ b/banking.php
@@ -57,13 +57,6 @@ function banking_civicrm_install() {
   return _banking_civix_civicrm_install();
 }
 
-/**
- * Implementation of hook_civicrm_uninstall
- */
-function banking_civicrm_uninstall() {
-  return _banking_civix_civicrm_uninstall();
-}
-
 /**
  * Implementation of hook_civicrm_enable
  */
@@ -74,39 +67,10 @@ function banking_civicrm_enable() {
   return _banking_civix_civicrm_enable();
 }
 
-/**
- * Implementation of hook_civicrm_disable
- */
-function banking_civicrm_disable() {
-  return _banking_civix_civicrm_disable();
-}
-
-/**
- * Implementation of hook_civicrm_upgrade
- *
- * @param $op string, the type of operation being performed; 'check' or 'enqueue'
- * @param $queue CRM_Queue_Queue, (for 'enqueue') the modifiable list of pending up upgrade tasks
- *
- * @return mixed  based on op. for 'check', returns array(boolean) (TRUE if upgrades are pending)
- *                for 'enqueue', returns void
- */
-function banking_civicrm_upgrade($op, CRM_Queue_Queue $queue = NULL) {
-  return _banking_civix_civicrm_upgrade($op, $queue);
-}
-
 function banking_civicrm_angularModules(&$angularModules) {
   return;
 }
 
-/**
- * Implements hook_civicrm_postInstall().
- *
- * @link https://docs.civicrm.org/dev/en/latest/hooks/hook_civicrm_postInstall
- */
-function banking_civicrm_postInstall() {
-  _banking_civix_civicrm_postInstall();
-}
-
 /**
  * Inject contribution - transaction link
  */
diff --git a/info.xml b/info.xml
index 644a706e..3af5fb31 100755
--- a/info.xml
+++ b/info.xml
@@ -18,20 +18,23 @@
   <version>1.0-alpha2</version>
   <develStage>alpha</develStage>
   <compatibility>
-    <ver>5.37</ver>
     <ver>5.60</ver>
   </compatibility>
   <classloader>
     <psr4 prefix="Civi\" path="Civi"/>
+    <psr0 prefix="CRM_" path="."/>
   </classloader>
   <comments>Implements handling of bank accounts for contacts, as well as handling of bank files (and individual bank payments extracted from the files). Bank files can be imported, transactions matched to CiviCRM entities, and the resulting data exported. Specific handlers for all of these actions are provided through plugins, some of which are shipped with the core banking extension, while some more complex ones are provided in separate extensions. More information here: https://docs.civicrm.org/banking/en/latest</comments>
   <civix>
     <namespace>CRM/Banking</namespace>
-    <format>22.05.2</format>
+    <format>23.02.1</format>
   </civix>
   <mixins>
     <mixin>ang-php@1.0.0</mixin>
     <mixin>menu-xml@1.0.0</mixin>
     <mixin>mgd-php@1.0.0</mixin>
+    <mixin>smarty-v2@1.0.1</mixin>
+    <mixin>entity-types-php@1.0.0</mixin>
   </mixins>
+  <upgrader>CRM_Banking_Upgrader</upgrader>
 </extension>
diff --git a/mixin/ang-php@1.0.0.mixin.php b/mixin/ang-php@1.0.0.mixin.php
deleted file mode 100644
index 6719db35..00000000
--- a/mixin/ang-php@1.0.0.mixin.php
+++ /dev/null
@@ -1,37 +0,0 @@
-<?php
-
-/**
- * Auto-register "ang/*.ang.php" files.
- *
- * @mixinName ang-php
- * @mixinVersion 1.0.0
- *
- * @param CRM_Extension_MixInfo $mixInfo
- *   On newer deployments, this will be an instance of MixInfo. On older deployments, Civix may polyfill with a work-a-like.
- * @param \CRM_Extension_BootCache $bootCache
- *   On newer deployments, this will be an instance of MixInfo. On older deployments, Civix may polyfill with a work-a-like.
- */
-return function ($mixInfo, $bootCache) {
-
-  /**
-   * @param \Civi\Core\Event\GenericHookEvent $e
-   * @see CRM_Utils_Hook::angularModules()
-   */
-  Civi::dispatcher()->addListener('hook_civicrm_angularModules', function ($e) use ($mixInfo) {
-    // When deactivating on a polyfill/pre-mixin system, listeners may not cleanup automatically.
-    if (!$mixInfo->isActive() || !is_dir($mixInfo->getPath('ang'))) {
-      return;
-    }
-
-    $files = (array) glob($mixInfo->getPath('ang/*.ang.php'));
-    foreach ($files as $file) {
-      $name = preg_replace(':\.ang\.php$:', '', basename($file));
-      $module = include $file;
-      if (empty($module['ext'])) {
-        $module['ext'] = $mixInfo->longName;
-      }
-      $e->angularModules[$name] = $module;
-    }
-  });
-
-};
diff --git a/mixin/menu-xml@1.0.0.mixin.php b/mixin/menu-xml@1.0.0.mixin.php
deleted file mode 100644
index 4c0b2276..00000000
--- a/mixin/menu-xml@1.0.0.mixin.php
+++ /dev/null
@@ -1,31 +0,0 @@
-<?php
-
-/**
- * Auto-register "xml/Menu/*.xml" files.
- *
- * @mixinName menu-xml
- * @mixinVersion 1.0.0
- *
- * @param CRM_Extension_MixInfo $mixInfo
- *   On newer deployments, this will be an instance of MixInfo. On older deployments, Civix may polyfill with a work-a-like.
- * @param \CRM_Extension_BootCache $bootCache
- *   On newer deployments, this will be an instance of MixInfo. On older deployments, Civix may polyfill with a work-a-like.
- */
-return function ($mixInfo, $bootCache) {
-
-  /**
-   * @param \Civi\Core\Event\GenericHookEvent $e
-   * @see CRM_Utils_Hook::xmlMenu()
-   */
-  Civi::dispatcher()->addListener('hook_civicrm_xmlMenu', function ($e) use ($mixInfo) {
-    if (!$mixInfo->isActive()) {
-      return;
-    }
-
-    $files = (array) glob($mixInfo->getPath('xml/Menu/*.xml'));
-    foreach ($files as $file) {
-      $e->files[] = $file;
-    }
-  });
-
-};
diff --git a/mixin/mgd-php@1.0.0.mixin.php b/mixin/mgd-php@1.0.0.mixin.php
deleted file mode 100644
index 39d45b14..00000000
--- a/mixin/mgd-php@1.0.0.mixin.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-
-/**
- * Auto-register "**.mgd.php" files.
- *
- * @mixinName mgd-php
- * @mixinVersion 1.0.0
- *
- * @param CRM_Extension_MixInfo $mixInfo
- *   On newer deployments, this will be an instance of MixInfo. On older deployments, Civix may polyfill with a work-a-like.
- * @param \CRM_Extension_BootCache $bootCache
- *   On newer deployments, this will be an instance of MixInfo. On older deployments, Civix may polyfill with a work-a-like.
- */
-return function ($mixInfo, $bootCache) {
-
-  /**
-   * @param \Civi\Core\Event\GenericHookEvent $e
-   * @see CRM_Utils_Hook::managed()
-   */
-  Civi::dispatcher()->addListener('hook_civicrm_managed', function ($event) use ($mixInfo) {
-    // When deactivating on a polyfill/pre-mixin system, listeners may not cleanup automatically.
-    if (!$mixInfo->isActive()) {
-      return;
-    }
-
-    $mgdFiles = CRM_Utils_File::findFiles($mixInfo->getPath(), '*.mgd.php');
-    sort($mgdFiles);
-    foreach ($mgdFiles as $file) {
-      $es = include $file;
-      foreach ($es as $e) {
-        if (empty($e['module'])) {
-          $e['module'] = $mixInfo->longName;
-        }
-        if (empty($e['params']['version'])) {
-          $e['params']['version'] = '3';
-        }
-        $event->entities[] = $e;
-      }
-    }
-  });
-
-};
diff --git a/mixin/polyfill.php b/mixin/polyfill.php
deleted file mode 100644
index f57c5ebb..00000000
--- a/mixin/polyfill.php
+++ /dev/null
@@ -1,101 +0,0 @@
-<?php
-
-/**
- * When deploying on systems that lack mixin support, fake it.
- *
- * @mixinFile polyfill.php
- *
- * This polyfill does some (persnickity) deduplication, but it doesn't allow upgrades or shipping replacements in core.
- *
- * Note: The polyfill.php is designed to be copied into extensions for interoperability. Consequently, this file is
- * not used 'live' by `civicrm-core`. However, the file does need a canonical home, and it's convenient to keep it
- * adjacent to the actual mixin files.
- *
- * @param string $longName
- * @param string $shortName
- * @param string $basePath
- */
-return function ($longName, $shortName, $basePath) {
-  // Construct imitations of the mixin services. These cannot work as well (e.g. with respect to
-  // number of file-reads, deduping, upgrading)... but they should be OK for a few months while
-  // the mixin services become available.
-
-  // List of active mixins; deduped by version
-  $mixinVers = [];
-  foreach ((array) glob($basePath . '/mixin/*.mixin.php') as $f) {
-    [$name, $ver] = explode('@', substr(basename($f), 0, -10));
-    if (!isset($mixinVers[$name]) || version_compare($ver, $mixinVers[$name], '>')) {
-      $mixinVers[$name] = $ver;
-    }
-  }
-  $mixins = [];
-  foreach ($mixinVers as $name => $ver) {
-    $mixins[] = "$name@$ver";
-  }
-
-  // Imitate CRM_Extension_MixInfo.
-  $mixInfo = new class() {
-
-    /**
-     * @var string
-     */
-    public $longName;
-
-    /**
-     * @var string
-     */
-    public $shortName;
-
-    public $_basePath;
-
-    public function getPath($file = NULL) {
-      return $this->_basePath . ($file === NULL ? '' : (DIRECTORY_SEPARATOR . $file));
-    }
-
-    public function isActive() {
-      return \CRM_Extension_System::singleton()->getMapper()->isActiveModule($this->shortName);
-    }
-
-  };
-  $mixInfo->longName = $longName;
-  $mixInfo->shortName = $shortName;
-  $mixInfo->_basePath = $basePath;
-
-  // Imitate CRM_Extension_BootCache.
-  $bootCache = new class() {
-
-    public function define($name, $callback) {
-      $envId = \CRM_Core_Config_Runtime::getId();
-      $oldExtCachePath = \Civi::paths()->getPath("[civicrm.compile]/CachedExtLoader.{$envId}.php");
-      $stat = stat($oldExtCachePath);
-      $file = Civi::paths()->getPath('[civicrm.compile]/CachedMixin.' . md5($name . ($stat['mtime'] ?? 0)) . '.php');
-      if (file_exists($file)) {
-        return include $file;
-      }
-      else {
-        $data = $callback();
-        file_put_contents($file, '<' . "?php\nreturn " . var_export($data, 1) . ';');
-        return $data;
-      }
-    }
-
-  };
-
-  // Imitate CRM_Extension_MixinLoader::run()
-  // Parse all live mixins before trying to scan any classes.
-  global $_CIVIX_MIXIN_POLYFILL;
-  foreach ($mixins as $mixin) {
-    // If the exact same mixin is defined by multiple exts, just use the first one.
-    if (!isset($_CIVIX_MIXIN_POLYFILL[$mixin])) {
-      $_CIVIX_MIXIN_POLYFILL[$mixin] = include_once $basePath . '/mixin/' . $mixin . '.mixin.php';
-    }
-  }
-  foreach ($mixins as $mixin) {
-    // If there's trickery about installs/uninstalls/resets, then we may need to register a second time.
-    if (!isset(\Civi::$statics[__FUNCTION__][$mixin])) {
-      \Civi::$statics[__FUNCTION__][$mixin] = 1;
-      $func = $_CIVIX_MIXIN_POLYFILL[$mixin];
-      $func($mixInfo, $bootCache);
-    }
-  }
-};
